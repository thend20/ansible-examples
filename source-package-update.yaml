# Update the version varibles, the package name, and the version check command below
# This script assumes the packages are in a directory called `package` in your CWD `./package/HERE`
#
# Instructions
# * Update the hosts list
# * run: ansible-playbook thisfile.yml [-l server1]

# First pull down the tarballs 
---
- hosts: build_servers
  gather_facts: false
  serial: 10
  max_fail_percentage: 10
  order: shuffle

# vers = the version number in the name of the tar file
# package = the name of the package in your package file. Should look like this: $pack$vers_$os.txz
  vars:
    vers: 132
    package: python-pika

  tasks:
    - name: pull files
      synchronize:
        src: /usr/MOVE/{{ package }}{{ vers }}_*
        dest: package
        mode: pull


# push out the update
- hosts: ALL
  gather_facts: false
  serial: [1, 5, 10, 25, 50, 100, 10%, 10%, 10%, 10%, 20%, 50%]
  max_fail_percentage: 10
  order: shuffle
  remote_user: root

# vers = the version number in the name of the tar file
# vers_log = the version number to expect in the version command
# package = the name of the package in your package file. Should look like this: $pack$vers_$os.txz
# v_cmd = the version check command
# restart_cmd: what to run after the update
  vars:
    vers: '132'
    vers_long: '1.3.2'
    package: python-pika
    v_cmd: pip show pika
    restart_cmd: "supervisorctl restart rabbitmq-consumer"

  pre_tasks:
  - name: version check
    command: '{{ v_cmd }}'
    ignore_errors: true
    register: version

  - name: Upload package
    synchronize:
       src: package/{{package}}{{vers}}_{{ hostvars[ansible_host].os }}.txz
       dest: /tmp/src
    when: 'vers_long not in version.stdout'

  - name: Unpack
    command: tar xJf /tmp/src/{{package}}{{vers}}_{{ hostvars[ansible_host].os }}.txz -C /
    args:
      removes: /tmp/src/{{package}}{{vers}}_{{ hostvars[ansible_host].os }}.txz
    register: restartme

  - name: Cleanup
    file:
      state: absent
      path: /tmp/src/{{package}}{{vers}}_{{ hostvars[ansible_host].os }}.txz

  - name: version check
    command: '{{ v_cmd }}'
    register: postversion

  - name: slack me
    slack:
          token: XXX
          msg: Update of {{package}} on {{inventory_hostname}} failed
    when: 'vers_long not in postversion.stdout'

  - name: restart service
    command: '{{restart_cmd}}'
    when: restartme.stdout == ''
    notify:
      - pause me

# Lets pause after each iteration
  handlers:
  - name: pause me
    pause:

